// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleAttitudeSetpoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "VehicleAttitudeSetpoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>










px4_msgs::msg::VehicleAttitudeSetpoint::VehicleAttitudeSetpoint()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@21282ed8
    m_timestamp = 0;
    // m_roll_body com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36916eb0
    m_roll_body = 0.0;
    // m_pitch_body com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7bab3f1a
    m_pitch_body = 0.0;
    // m_yaw_body com.eprosima.idl.parser.typecode.PrimitiveTypeCode@437da279
    m_yaw_body = 0.0;
    // m_yaw_sp_move_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23c30a20
    m_yaw_sp_move_rate = 0.0;
    // m_q_d com.eprosima.idl.parser.typecode.AliasTypeCode@1e1a0406
    memset(&m_q_d, 0, (4) * 4);
    // m_thrust_body com.eprosima.idl.parser.typecode.AliasTypeCode@3cebbb30
    memset(&m_thrust_body, 0, (3) * 4);
    // m_reset_rate_integrals com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12aba8be
    m_reset_rate_integrals = false;
    // m_fw_control_yaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@290222c1
    m_fw_control_yaw = false;
    // m_apply_flaps com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67f639d3
    m_apply_flaps = 0;
    // m_apply_spoilers com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6253c26
    m_apply_spoilers = 0;

}

px4_msgs::msg::VehicleAttitudeSetpoint::~VehicleAttitudeSetpoint()
{











}

px4_msgs::msg::VehicleAttitudeSetpoint::VehicleAttitudeSetpoint(const VehicleAttitudeSetpoint &x)
{
    m_timestamp = x.m_timestamp;
    m_roll_body = x.m_roll_body;
    m_pitch_body = x.m_pitch_body;
    m_yaw_body = x.m_yaw_body;
    m_yaw_sp_move_rate = x.m_yaw_sp_move_rate;
    m_q_d = x.m_q_d;
    m_thrust_body = x.m_thrust_body;
    m_reset_rate_integrals = x.m_reset_rate_integrals;
    m_fw_control_yaw = x.m_fw_control_yaw;
    m_apply_flaps = x.m_apply_flaps;
    m_apply_spoilers = x.m_apply_spoilers;
}

px4_msgs::msg::VehicleAttitudeSetpoint::VehicleAttitudeSetpoint(VehicleAttitudeSetpoint &&x)
{
    m_timestamp = x.m_timestamp;
    m_roll_body = x.m_roll_body;
    m_pitch_body = x.m_pitch_body;
    m_yaw_body = x.m_yaw_body;
    m_yaw_sp_move_rate = x.m_yaw_sp_move_rate;
    m_q_d = std::move(x.m_q_d);
    m_thrust_body = std::move(x.m_thrust_body);
    m_reset_rate_integrals = x.m_reset_rate_integrals;
    m_fw_control_yaw = x.m_fw_control_yaw;
    m_apply_flaps = x.m_apply_flaps;
    m_apply_spoilers = x.m_apply_spoilers;
}

px4_msgs::msg::VehicleAttitudeSetpoint& px4_msgs::msg::VehicleAttitudeSetpoint::operator=(const VehicleAttitudeSetpoint &x)
{

    m_timestamp = x.m_timestamp;
    m_roll_body = x.m_roll_body;
    m_pitch_body = x.m_pitch_body;
    m_yaw_body = x.m_yaw_body;
    m_yaw_sp_move_rate = x.m_yaw_sp_move_rate;
    m_q_d = x.m_q_d;
    m_thrust_body = x.m_thrust_body;
    m_reset_rate_integrals = x.m_reset_rate_integrals;
    m_fw_control_yaw = x.m_fw_control_yaw;
    m_apply_flaps = x.m_apply_flaps;
    m_apply_spoilers = x.m_apply_spoilers;

    return *this;
}

px4_msgs::msg::VehicleAttitudeSetpoint& px4_msgs::msg::VehicleAttitudeSetpoint::operator=(VehicleAttitudeSetpoint &&x)
{

    m_timestamp = x.m_timestamp;
    m_roll_body = x.m_roll_body;
    m_pitch_body = x.m_pitch_body;
    m_yaw_body = x.m_yaw_body;
    m_yaw_sp_move_rate = x.m_yaw_sp_move_rate;
    m_q_d = std::move(x.m_q_d);
    m_thrust_body = std::move(x.m_thrust_body);
    m_reset_rate_integrals = x.m_reset_rate_integrals;
    m_fw_control_yaw = x.m_fw_control_yaw;
    m_apply_flaps = x.m_apply_flaps;
    m_apply_spoilers = x.m_apply_spoilers;

    return *this;
}

size_t px4_msgs::msg::VehicleAttitudeSetpoint::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::VehicleAttitudeSetpoint::getCdrSerializedSize(const px4_msgs::msg::VehicleAttitudeSetpoint& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::VehicleAttitudeSetpoint::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_roll_body;
    scdr << m_pitch_body;
    scdr << m_yaw_body;
    scdr << m_yaw_sp_move_rate;
    scdr << m_q_d;

    scdr << m_thrust_body;

    scdr << m_reset_rate_integrals;
    scdr << m_fw_control_yaw;
    scdr << m_apply_flaps;
    scdr << m_apply_spoilers;
}

void px4_msgs::msg::VehicleAttitudeSetpoint::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_roll_body;
    dcdr >> m_pitch_body;
    dcdr >> m_yaw_body;
    dcdr >> m_yaw_sp_move_rate;
    dcdr >> m_q_d;

    dcdr >> m_thrust_body;

    dcdr >> m_reset_rate_integrals;
    dcdr >> m_fw_control_yaw;
    dcdr >> m_apply_flaps;
    dcdr >> m_apply_spoilers;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::VehicleAttitudeSetpoint::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::VehicleAttitudeSetpoint::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member roll_body
 * @param _roll_body New value for member roll_body
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::roll_body(float _roll_body)
{
m_roll_body = _roll_body;
}

/*!
 * @brief This function returns the value of member roll_body
 * @return Value of member roll_body
 */
float px4_msgs::msg::VehicleAttitudeSetpoint::roll_body() const
{
    return m_roll_body;
}

/*!
 * @brief This function returns a reference to member roll_body
 * @return Reference to member roll_body
 */
float& px4_msgs::msg::VehicleAttitudeSetpoint::roll_body()
{
    return m_roll_body;
}

/*!
 * @brief This function sets a value in member pitch_body
 * @param _pitch_body New value for member pitch_body
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::pitch_body(float _pitch_body)
{
m_pitch_body = _pitch_body;
}

/*!
 * @brief This function returns the value of member pitch_body
 * @return Value of member pitch_body
 */
float px4_msgs::msg::VehicleAttitudeSetpoint::pitch_body() const
{
    return m_pitch_body;
}

/*!
 * @brief This function returns a reference to member pitch_body
 * @return Reference to member pitch_body
 */
float& px4_msgs::msg::VehicleAttitudeSetpoint::pitch_body()
{
    return m_pitch_body;
}

/*!
 * @brief This function sets a value in member yaw_body
 * @param _yaw_body New value for member yaw_body
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::yaw_body(float _yaw_body)
{
m_yaw_body = _yaw_body;
}

/*!
 * @brief This function returns the value of member yaw_body
 * @return Value of member yaw_body
 */
float px4_msgs::msg::VehicleAttitudeSetpoint::yaw_body() const
{
    return m_yaw_body;
}

/*!
 * @brief This function returns a reference to member yaw_body
 * @return Reference to member yaw_body
 */
float& px4_msgs::msg::VehicleAttitudeSetpoint::yaw_body()
{
    return m_yaw_body;
}

/*!
 * @brief This function sets a value in member yaw_sp_move_rate
 * @param _yaw_sp_move_rate New value for member yaw_sp_move_rate
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::yaw_sp_move_rate(float _yaw_sp_move_rate)
{
m_yaw_sp_move_rate = _yaw_sp_move_rate;
}

/*!
 * @brief This function returns the value of member yaw_sp_move_rate
 * @return Value of member yaw_sp_move_rate
 */
float px4_msgs::msg::VehicleAttitudeSetpoint::yaw_sp_move_rate() const
{
    return m_yaw_sp_move_rate;
}

/*!
 * @brief This function returns a reference to member yaw_sp_move_rate
 * @return Reference to member yaw_sp_move_rate
 */
float& px4_msgs::msg::VehicleAttitudeSetpoint::yaw_sp_move_rate()
{
    return m_yaw_sp_move_rate;
}

/*!
 * @brief This function copies the value in member q_d
 * @param _q_d New value to be copied in member q_d
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::q_d(const px4_msgs::msg::float__4 &_q_d)
{
m_q_d = _q_d;
}

/*!
 * @brief This function moves the value in member q_d
 * @param _q_d New value to be moved in member q_d
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::q_d(px4_msgs::msg::float__4 &&_q_d)
{
m_q_d = std::move(_q_d);
}

/*!
 * @brief This function returns a constant reference to member q_d
 * @return Constant reference to member q_d
 */
const px4_msgs::msg::float__4& px4_msgs::msg::VehicleAttitudeSetpoint::q_d() const
{
    return m_q_d;
}

/*!
 * @brief This function returns a reference to member q_d
 * @return Reference to member q_d
 */
px4_msgs::msg::float__4& px4_msgs::msg::VehicleAttitudeSetpoint::q_d()
{
    return m_q_d;
}
/*!
 * @brief This function copies the value in member thrust_body
 * @param _thrust_body New value to be copied in member thrust_body
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::thrust_body(const px4_msgs::msg::float__3 &_thrust_body)
{
m_thrust_body = _thrust_body;
}

/*!
 * @brief This function moves the value in member thrust_body
 * @param _thrust_body New value to be moved in member thrust_body
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::thrust_body(px4_msgs::msg::float__3 &&_thrust_body)
{
m_thrust_body = std::move(_thrust_body);
}

/*!
 * @brief This function returns a constant reference to member thrust_body
 * @return Constant reference to member thrust_body
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleAttitudeSetpoint::thrust_body() const
{
    return m_thrust_body;
}

/*!
 * @brief This function returns a reference to member thrust_body
 * @return Reference to member thrust_body
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleAttitudeSetpoint::thrust_body()
{
    return m_thrust_body;
}
/*!
 * @brief This function sets a value in member reset_rate_integrals
 * @param _reset_rate_integrals New value for member reset_rate_integrals
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::reset_rate_integrals(bool _reset_rate_integrals)
{
m_reset_rate_integrals = _reset_rate_integrals;
}

/*!
 * @brief This function returns the value of member reset_rate_integrals
 * @return Value of member reset_rate_integrals
 */
bool px4_msgs::msg::VehicleAttitudeSetpoint::reset_rate_integrals() const
{
    return m_reset_rate_integrals;
}

/*!
 * @brief This function returns a reference to member reset_rate_integrals
 * @return Reference to member reset_rate_integrals
 */
bool& px4_msgs::msg::VehicleAttitudeSetpoint::reset_rate_integrals()
{
    return m_reset_rate_integrals;
}

/*!
 * @brief This function sets a value in member fw_control_yaw
 * @param _fw_control_yaw New value for member fw_control_yaw
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::fw_control_yaw(bool _fw_control_yaw)
{
m_fw_control_yaw = _fw_control_yaw;
}

/*!
 * @brief This function returns the value of member fw_control_yaw
 * @return Value of member fw_control_yaw
 */
bool px4_msgs::msg::VehicleAttitudeSetpoint::fw_control_yaw() const
{
    return m_fw_control_yaw;
}

/*!
 * @brief This function returns a reference to member fw_control_yaw
 * @return Reference to member fw_control_yaw
 */
bool& px4_msgs::msg::VehicleAttitudeSetpoint::fw_control_yaw()
{
    return m_fw_control_yaw;
}

/*!
 * @brief This function sets a value in member apply_flaps
 * @param _apply_flaps New value for member apply_flaps
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::apply_flaps(uint8_t _apply_flaps)
{
m_apply_flaps = _apply_flaps;
}

/*!
 * @brief This function returns the value of member apply_flaps
 * @return Value of member apply_flaps
 */
uint8_t px4_msgs::msg::VehicleAttitudeSetpoint::apply_flaps() const
{
    return m_apply_flaps;
}

/*!
 * @brief This function returns a reference to member apply_flaps
 * @return Reference to member apply_flaps
 */
uint8_t& px4_msgs::msg::VehicleAttitudeSetpoint::apply_flaps()
{
    return m_apply_flaps;
}

/*!
 * @brief This function sets a value in member apply_spoilers
 * @param _apply_spoilers New value for member apply_spoilers
 */
void px4_msgs::msg::VehicleAttitudeSetpoint::apply_spoilers(uint8_t _apply_spoilers)
{
m_apply_spoilers = _apply_spoilers;
}

/*!
 * @brief This function returns the value of member apply_spoilers
 * @return Value of member apply_spoilers
 */
uint8_t px4_msgs::msg::VehicleAttitudeSetpoint::apply_spoilers() const
{
    return m_apply_spoilers;
}

/*!
 * @brief This function returns a reference to member apply_spoilers
 * @return Reference to member apply_spoilers
 */
uint8_t& px4_msgs::msg::VehicleAttitudeSetpoint::apply_spoilers()
{
    return m_apply_spoilers;
}


size_t px4_msgs::msg::VehicleAttitudeSetpoint::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;














    return current_align;
}

bool px4_msgs::msg::VehicleAttitudeSetpoint::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::VehicleAttitudeSetpoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
}


