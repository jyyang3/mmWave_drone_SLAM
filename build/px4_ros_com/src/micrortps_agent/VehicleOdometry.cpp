// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleOdometry.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "VehicleOdometry.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>











px4_msgs::msg::VehicleOdometry::VehicleOdometry()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2474f125
    m_timestamp = 0;
    // m_timestamp_sample com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7357a011
    m_timestamp_sample = 0;
    // m_pose_frame com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3406472c
    m_pose_frame = 0;
    // m_position com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_position, 0, (3) * 4);
    // m_q com.eprosima.idl.parser.typecode.AliasTypeCode@68f4865
    memset(&m_q, 0, (4) * 4);
    // m_velocity_frame com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4816278d
    m_velocity_frame = 0;
    // m_velocity com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_velocity, 0, (3) * 4);
    // m_angular_velocity com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_angular_velocity, 0, (3) * 4);
    // m_position_variance com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_position_variance, 0, (3) * 4);
    // m_orientation_variance com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_orientation_variance, 0, (3) * 4);
    // m_velocity_variance com.eprosima.idl.parser.typecode.AliasTypeCode@5717c37
    memset(&m_velocity_variance, 0, (3) * 4);
    // m_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4eaf3684
    m_reset_counter = 0;
    // m_quality com.eprosima.idl.parser.typecode.PrimitiveTypeCode@40317ba2
    m_quality = 0;

}

px4_msgs::msg::VehicleOdometry::~VehicleOdometry()
{













}

px4_msgs::msg::VehicleOdometry::VehicleOdometry(const VehicleOdometry &x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_pose_frame = x.m_pose_frame;
    m_position = x.m_position;
    m_q = x.m_q;
    m_velocity_frame = x.m_velocity_frame;
    m_velocity = x.m_velocity;
    m_angular_velocity = x.m_angular_velocity;
    m_position_variance = x.m_position_variance;
    m_orientation_variance = x.m_orientation_variance;
    m_velocity_variance = x.m_velocity_variance;
    m_reset_counter = x.m_reset_counter;
    m_quality = x.m_quality;
}

px4_msgs::msg::VehicleOdometry::VehicleOdometry(VehicleOdometry &&x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_pose_frame = x.m_pose_frame;
    m_position = std::move(x.m_position);
    m_q = std::move(x.m_q);
    m_velocity_frame = x.m_velocity_frame;
    m_velocity = std::move(x.m_velocity);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_position_variance = std::move(x.m_position_variance);
    m_orientation_variance = std::move(x.m_orientation_variance);
    m_velocity_variance = std::move(x.m_velocity_variance);
    m_reset_counter = x.m_reset_counter;
    m_quality = x.m_quality;
}

px4_msgs::msg::VehicleOdometry& px4_msgs::msg::VehicleOdometry::operator=(const VehicleOdometry &x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_pose_frame = x.m_pose_frame;
    m_position = x.m_position;
    m_q = x.m_q;
    m_velocity_frame = x.m_velocity_frame;
    m_velocity = x.m_velocity;
    m_angular_velocity = x.m_angular_velocity;
    m_position_variance = x.m_position_variance;
    m_orientation_variance = x.m_orientation_variance;
    m_velocity_variance = x.m_velocity_variance;
    m_reset_counter = x.m_reset_counter;
    m_quality = x.m_quality;

    return *this;
}

px4_msgs::msg::VehicleOdometry& px4_msgs::msg::VehicleOdometry::operator=(VehicleOdometry &&x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_pose_frame = x.m_pose_frame;
    m_position = std::move(x.m_position);
    m_q = std::move(x.m_q);
    m_velocity_frame = x.m_velocity_frame;
    m_velocity = std::move(x.m_velocity);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_position_variance = std::move(x.m_position_variance);
    m_orientation_variance = std::move(x.m_orientation_variance);
    m_velocity_variance = std::move(x.m_velocity_variance);
    m_reset_counter = x.m_reset_counter;
    m_quality = x.m_quality;

    return *this;
}

size_t px4_msgs::msg::VehicleOdometry::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::VehicleOdometry::getCdrSerializedSize(const px4_msgs::msg::VehicleOdometry& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::VehicleOdometry::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_timestamp_sample;
    scdr << m_pose_frame;
    scdr << m_position;

    scdr << m_q;

    scdr << m_velocity_frame;
    scdr << m_velocity;

    scdr << m_angular_velocity;

    scdr << m_position_variance;

    scdr << m_orientation_variance;

    scdr << m_velocity_variance;

    scdr << m_reset_counter;
    scdr << m_quality;
}

void px4_msgs::msg::VehicleOdometry::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_timestamp_sample;
    dcdr >> m_pose_frame;
    dcdr >> m_position;

    dcdr >> m_q;

    dcdr >> m_velocity_frame;
    dcdr >> m_velocity;

    dcdr >> m_angular_velocity;

    dcdr >> m_position_variance;

    dcdr >> m_orientation_variance;

    dcdr >> m_velocity_variance;

    dcdr >> m_reset_counter;
    dcdr >> m_quality;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::VehicleOdometry::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::VehicleOdometry::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::VehicleOdometry::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member timestamp_sample
 * @param _timestamp_sample New value for member timestamp_sample
 */
void px4_msgs::msg::VehicleOdometry::timestamp_sample(uint64_t _timestamp_sample)
{
m_timestamp_sample = _timestamp_sample;
}

/*!
 * @brief This function returns the value of member timestamp_sample
 * @return Value of member timestamp_sample
 */
uint64_t px4_msgs::msg::VehicleOdometry::timestamp_sample() const
{
    return m_timestamp_sample;
}

/*!
 * @brief This function returns a reference to member timestamp_sample
 * @return Reference to member timestamp_sample
 */
uint64_t& px4_msgs::msg::VehicleOdometry::timestamp_sample()
{
    return m_timestamp_sample;
}

/*!
 * @brief This function sets a value in member pose_frame
 * @param _pose_frame New value for member pose_frame
 */
void px4_msgs::msg::VehicleOdometry::pose_frame(uint8_t _pose_frame)
{
m_pose_frame = _pose_frame;
}

/*!
 * @brief This function returns the value of member pose_frame
 * @return Value of member pose_frame
 */
uint8_t px4_msgs::msg::VehicleOdometry::pose_frame() const
{
    return m_pose_frame;
}

/*!
 * @brief This function returns a reference to member pose_frame
 * @return Reference to member pose_frame
 */
uint8_t& px4_msgs::msg::VehicleOdometry::pose_frame()
{
    return m_pose_frame;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void px4_msgs::msg::VehicleOdometry::position(const px4_msgs::msg::float__3 &_position)
{
m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void px4_msgs::msg::VehicleOdometry::position(px4_msgs::msg::float__3 &&_position)
{
m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::position()
{
    return m_position;
}
/*!
 * @brief This function copies the value in member q
 * @param _q New value to be copied in member q
 */
void px4_msgs::msg::VehicleOdometry::q(const px4_msgs::msg::float__4 &_q)
{
m_q = _q;
}

/*!
 * @brief This function moves the value in member q
 * @param _q New value to be moved in member q
 */
void px4_msgs::msg::VehicleOdometry::q(px4_msgs::msg::float__4 &&_q)
{
m_q = std::move(_q);
}

/*!
 * @brief This function returns a constant reference to member q
 * @return Constant reference to member q
 */
const px4_msgs::msg::float__4& px4_msgs::msg::VehicleOdometry::q() const
{
    return m_q;
}

/*!
 * @brief This function returns a reference to member q
 * @return Reference to member q
 */
px4_msgs::msg::float__4& px4_msgs::msg::VehicleOdometry::q()
{
    return m_q;
}
/*!
 * @brief This function sets a value in member velocity_frame
 * @param _velocity_frame New value for member velocity_frame
 */
void px4_msgs::msg::VehicleOdometry::velocity_frame(uint8_t _velocity_frame)
{
m_velocity_frame = _velocity_frame;
}

/*!
 * @brief This function returns the value of member velocity_frame
 * @return Value of member velocity_frame
 */
uint8_t px4_msgs::msg::VehicleOdometry::velocity_frame() const
{
    return m_velocity_frame;
}

/*!
 * @brief This function returns a reference to member velocity_frame
 * @return Reference to member velocity_frame
 */
uint8_t& px4_msgs::msg::VehicleOdometry::velocity_frame()
{
    return m_velocity_frame;
}

/*!
 * @brief This function copies the value in member velocity
 * @param _velocity New value to be copied in member velocity
 */
void px4_msgs::msg::VehicleOdometry::velocity(const px4_msgs::msg::float__3 &_velocity)
{
m_velocity = _velocity;
}

/*!
 * @brief This function moves the value in member velocity
 * @param _velocity New value to be moved in member velocity
 */
void px4_msgs::msg::VehicleOdometry::velocity(px4_msgs::msg::float__3 &&_velocity)
{
m_velocity = std::move(_velocity);
}

/*!
 * @brief This function returns a constant reference to member velocity
 * @return Constant reference to member velocity
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::velocity()
{
    return m_velocity;
}
/*!
 * @brief This function copies the value in member angular_velocity
 * @param _angular_velocity New value to be copied in member angular_velocity
 */
void px4_msgs::msg::VehicleOdometry::angular_velocity(const px4_msgs::msg::float__3 &_angular_velocity)
{
m_angular_velocity = _angular_velocity;
}

/*!
 * @brief This function moves the value in member angular_velocity
 * @param _angular_velocity New value to be moved in member angular_velocity
 */
void px4_msgs::msg::VehicleOdometry::angular_velocity(px4_msgs::msg::float__3 &&_angular_velocity)
{
m_angular_velocity = std::move(_angular_velocity);
}

/*!
 * @brief This function returns a constant reference to member angular_velocity
 * @return Constant reference to member angular_velocity
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::angular_velocity() const
{
    return m_angular_velocity;
}

/*!
 * @brief This function returns a reference to member angular_velocity
 * @return Reference to member angular_velocity
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::angular_velocity()
{
    return m_angular_velocity;
}
/*!
 * @brief This function copies the value in member position_variance
 * @param _position_variance New value to be copied in member position_variance
 */
void px4_msgs::msg::VehicleOdometry::position_variance(const px4_msgs::msg::float__3 &_position_variance)
{
m_position_variance = _position_variance;
}

/*!
 * @brief This function moves the value in member position_variance
 * @param _position_variance New value to be moved in member position_variance
 */
void px4_msgs::msg::VehicleOdometry::position_variance(px4_msgs::msg::float__3 &&_position_variance)
{
m_position_variance = std::move(_position_variance);
}

/*!
 * @brief This function returns a constant reference to member position_variance
 * @return Constant reference to member position_variance
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::position_variance() const
{
    return m_position_variance;
}

/*!
 * @brief This function returns a reference to member position_variance
 * @return Reference to member position_variance
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::position_variance()
{
    return m_position_variance;
}
/*!
 * @brief This function copies the value in member orientation_variance
 * @param _orientation_variance New value to be copied in member orientation_variance
 */
void px4_msgs::msg::VehicleOdometry::orientation_variance(const px4_msgs::msg::float__3 &_orientation_variance)
{
m_orientation_variance = _orientation_variance;
}

/*!
 * @brief This function moves the value in member orientation_variance
 * @param _orientation_variance New value to be moved in member orientation_variance
 */
void px4_msgs::msg::VehicleOdometry::orientation_variance(px4_msgs::msg::float__3 &&_orientation_variance)
{
m_orientation_variance = std::move(_orientation_variance);
}

/*!
 * @brief This function returns a constant reference to member orientation_variance
 * @return Constant reference to member orientation_variance
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::orientation_variance() const
{
    return m_orientation_variance;
}

/*!
 * @brief This function returns a reference to member orientation_variance
 * @return Reference to member orientation_variance
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::orientation_variance()
{
    return m_orientation_variance;
}
/*!
 * @brief This function copies the value in member velocity_variance
 * @param _velocity_variance New value to be copied in member velocity_variance
 */
void px4_msgs::msg::VehicleOdometry::velocity_variance(const px4_msgs::msg::float__3 &_velocity_variance)
{
m_velocity_variance = _velocity_variance;
}

/*!
 * @brief This function moves the value in member velocity_variance
 * @param _velocity_variance New value to be moved in member velocity_variance
 */
void px4_msgs::msg::VehicleOdometry::velocity_variance(px4_msgs::msg::float__3 &&_velocity_variance)
{
m_velocity_variance = std::move(_velocity_variance);
}

/*!
 * @brief This function returns a constant reference to member velocity_variance
 * @return Constant reference to member velocity_variance
 */
const px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::velocity_variance() const
{
    return m_velocity_variance;
}

/*!
 * @brief This function returns a reference to member velocity_variance
 * @return Reference to member velocity_variance
 */
px4_msgs::msg::float__3& px4_msgs::msg::VehicleOdometry::velocity_variance()
{
    return m_velocity_variance;
}
/*!
 * @brief This function sets a value in member reset_counter
 * @param _reset_counter New value for member reset_counter
 */
void px4_msgs::msg::VehicleOdometry::reset_counter(uint8_t _reset_counter)
{
m_reset_counter = _reset_counter;
}

/*!
 * @brief This function returns the value of member reset_counter
 * @return Value of member reset_counter
 */
uint8_t px4_msgs::msg::VehicleOdometry::reset_counter() const
{
    return m_reset_counter;
}

/*!
 * @brief This function returns a reference to member reset_counter
 * @return Reference to member reset_counter
 */
uint8_t& px4_msgs::msg::VehicleOdometry::reset_counter()
{
    return m_reset_counter;
}

/*!
 * @brief This function sets a value in member quality
 * @param _quality New value for member quality
 */
void px4_msgs::msg::VehicleOdometry::quality(int8_t _quality)
{
m_quality = _quality;
}

/*!
 * @brief This function returns the value of member quality
 * @return Value of member quality
 */
int8_t px4_msgs::msg::VehicleOdometry::quality() const
{
    return m_quality;
}

/*!
 * @brief This function returns a reference to member quality
 * @return Reference to member quality
 */
int8_t& px4_msgs::msg::VehicleOdometry::quality()
{
    return m_quality;
}


size_t px4_msgs::msg::VehicleOdometry::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
















    return current_align;
}

bool px4_msgs::msg::VehicleOdometry::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::VehicleOdometry::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
}


