// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SensorOpticalFlow.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_SENSOROPTICALFLOW_H_
#define _PX4_MSGS_MSG_SENSOROPTICALFLOW_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SensorOpticalFlow_SOURCE)
#define SensorOpticalFlow_DllAPI __declspec( dllexport )
#else
#define SensorOpticalFlow_DllAPI __declspec( dllimport )
#endif // SensorOpticalFlow_SOURCE
#else
#define SensorOpticalFlow_DllAPI
#endif
#else
#define SensorOpticalFlow_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        typedef std::array<float, 2> float__2;
        typedef std::array<float, 3> float__3;
        namespace SensorOpticalFlow_Constants
        {
            const uint8_t MODE_UNKNOWN = 0;
            const uint8_t MODE_BRIGHT = 1;
            const uint8_t MODE_LOWLIGHT = 2;
            const uint8_t MODE_SUPER_LOWLIGHT = 3;
        }
        /*!
         * @brief This class represents the structure SensorOpticalFlow defined by the user in the IDL file.
         * @ingroup SENSOROPTICALFLOW
         */
        class SensorOpticalFlow
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SensorOpticalFlow();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SensorOpticalFlow();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::SensorOpticalFlow that will be copied.
             */
            eProsima_user_DllExport SensorOpticalFlow(const SensorOpticalFlow &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::SensorOpticalFlow that will be copied.
             */
            eProsima_user_DllExport SensorOpticalFlow(SensorOpticalFlow &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::SensorOpticalFlow that will be copied.
             */
            eProsima_user_DllExport SensorOpticalFlow& operator=(const SensorOpticalFlow &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::SensorOpticalFlow that will be copied.
             */
            eProsima_user_DllExport SensorOpticalFlow& operator=(SensorOpticalFlow &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member timestamp_sample
             * @param _timestamp_sample New value for member timestamp_sample
             */
            eProsima_user_DllExport void timestamp_sample(uint64_t _timestamp_sample);

            /*!
             * @brief This function returns the value of member timestamp_sample
             * @return Value of member timestamp_sample
             */
            eProsima_user_DllExport uint64_t timestamp_sample() const;

            /*!
             * @brief This function returns a reference to member timestamp_sample
             * @return Reference to member timestamp_sample
             */
            eProsima_user_DllExport uint64_t& timestamp_sample();

            /*!
             * @brief This function sets a value in member device_id
             * @param _device_id New value for member device_id
             */
            eProsima_user_DllExport void device_id(uint32_t _device_id);

            /*!
             * @brief This function returns the value of member device_id
             * @return Value of member device_id
             */
            eProsima_user_DllExport uint32_t device_id() const;

            /*!
             * @brief This function returns a reference to member device_id
             * @return Reference to member device_id
             */
            eProsima_user_DllExport uint32_t& device_id();

            /*!
             * @brief This function copies the value in member pixel_flow
             * @param _pixel_flow New value to be copied in member pixel_flow
             */
            eProsima_user_DllExport void pixel_flow(const px4_msgs::msg::float__2 &_pixel_flow);

            /*!
             * @brief This function moves the value in member pixel_flow
             * @param _pixel_flow New value to be moved in member pixel_flow
             */
            eProsima_user_DllExport void pixel_flow(px4_msgs::msg::float__2 &&_pixel_flow);

            /*!
             * @brief This function returns a constant reference to member pixel_flow
             * @return Constant reference to member pixel_flow
             */
            eProsima_user_DllExport const px4_msgs::msg::float__2& pixel_flow() const;

            /*!
             * @brief This function returns a reference to member pixel_flow
             * @return Reference to member pixel_flow
             */
            eProsima_user_DllExport px4_msgs::msg::float__2& pixel_flow();
            /*!
             * @brief This function copies the value in member delta_angle
             * @param _delta_angle New value to be copied in member delta_angle
             */
            eProsima_user_DllExport void delta_angle(const px4_msgs::msg::float__3 &_delta_angle);

            /*!
             * @brief This function moves the value in member delta_angle
             * @param _delta_angle New value to be moved in member delta_angle
             */
            eProsima_user_DllExport void delta_angle(px4_msgs::msg::float__3 &&_delta_angle);

            /*!
             * @brief This function returns a constant reference to member delta_angle
             * @return Constant reference to member delta_angle
             */
            eProsima_user_DllExport const px4_msgs::msg::float__3& delta_angle() const;

            /*!
             * @brief This function returns a reference to member delta_angle
             * @return Reference to member delta_angle
             */
            eProsima_user_DllExport px4_msgs::msg::float__3& delta_angle();
            /*!
             * @brief This function sets a value in member delta_angle_available
             * @param _delta_angle_available New value for member delta_angle_available
             */
            eProsima_user_DllExport void delta_angle_available(bool _delta_angle_available);

            /*!
             * @brief This function returns the value of member delta_angle_available
             * @return Value of member delta_angle_available
             */
            eProsima_user_DllExport bool delta_angle_available() const;

            /*!
             * @brief This function returns a reference to member delta_angle_available
             * @return Reference to member delta_angle_available
             */
            eProsima_user_DllExport bool& delta_angle_available();

            /*!
             * @brief This function sets a value in member distance_m
             * @param _distance_m New value for member distance_m
             */
            eProsima_user_DllExport void distance_m(float _distance_m);

            /*!
             * @brief This function returns the value of member distance_m
             * @return Value of member distance_m
             */
            eProsima_user_DllExport float distance_m() const;

            /*!
             * @brief This function returns a reference to member distance_m
             * @return Reference to member distance_m
             */
            eProsima_user_DllExport float& distance_m();

            /*!
             * @brief This function sets a value in member distance_available
             * @param _distance_available New value for member distance_available
             */
            eProsima_user_DllExport void distance_available(bool _distance_available);

            /*!
             * @brief This function returns the value of member distance_available
             * @return Value of member distance_available
             */
            eProsima_user_DllExport bool distance_available() const;

            /*!
             * @brief This function returns a reference to member distance_available
             * @return Reference to member distance_available
             */
            eProsima_user_DllExport bool& distance_available();

            /*!
             * @brief This function sets a value in member integration_timespan_us
             * @param _integration_timespan_us New value for member integration_timespan_us
             */
            eProsima_user_DllExport void integration_timespan_us(uint32_t _integration_timespan_us);

            /*!
             * @brief This function returns the value of member integration_timespan_us
             * @return Value of member integration_timespan_us
             */
            eProsima_user_DllExport uint32_t integration_timespan_us() const;

            /*!
             * @brief This function returns a reference to member integration_timespan_us
             * @return Reference to member integration_timespan_us
             */
            eProsima_user_DllExport uint32_t& integration_timespan_us();

            /*!
             * @brief This function sets a value in member quality
             * @param _quality New value for member quality
             */
            eProsima_user_DllExport void quality(uint8_t _quality);

            /*!
             * @brief This function returns the value of member quality
             * @return Value of member quality
             */
            eProsima_user_DllExport uint8_t quality() const;

            /*!
             * @brief This function returns a reference to member quality
             * @return Reference to member quality
             */
            eProsima_user_DllExport uint8_t& quality();

            /*!
             * @brief This function sets a value in member error_count
             * @param _error_count New value for member error_count
             */
            eProsima_user_DllExport void error_count(uint32_t _error_count);

            /*!
             * @brief This function returns the value of member error_count
             * @return Value of member error_count
             */
            eProsima_user_DllExport uint32_t error_count() const;

            /*!
             * @brief This function returns a reference to member error_count
             * @return Reference to member error_count
             */
            eProsima_user_DllExport uint32_t& error_count();

            /*!
             * @brief This function sets a value in member max_flow_rate
             * @param _max_flow_rate New value for member max_flow_rate
             */
            eProsima_user_DllExport void max_flow_rate(float _max_flow_rate);

            /*!
             * @brief This function returns the value of member max_flow_rate
             * @return Value of member max_flow_rate
             */
            eProsima_user_DllExport float max_flow_rate() const;

            /*!
             * @brief This function returns a reference to member max_flow_rate
             * @return Reference to member max_flow_rate
             */
            eProsima_user_DllExport float& max_flow_rate();

            /*!
             * @brief This function sets a value in member min_ground_distance
             * @param _min_ground_distance New value for member min_ground_distance
             */
            eProsima_user_DllExport void min_ground_distance(float _min_ground_distance);

            /*!
             * @brief This function returns the value of member min_ground_distance
             * @return Value of member min_ground_distance
             */
            eProsima_user_DllExport float min_ground_distance() const;

            /*!
             * @brief This function returns a reference to member min_ground_distance
             * @return Reference to member min_ground_distance
             */
            eProsima_user_DllExport float& min_ground_distance();

            /*!
             * @brief This function sets a value in member max_ground_distance
             * @param _max_ground_distance New value for member max_ground_distance
             */
            eProsima_user_DllExport void max_ground_distance(float _max_ground_distance);

            /*!
             * @brief This function returns the value of member max_ground_distance
             * @return Value of member max_ground_distance
             */
            eProsima_user_DllExport float max_ground_distance() const;

            /*!
             * @brief This function returns a reference to member max_ground_distance
             * @return Reference to member max_ground_distance
             */
            eProsima_user_DllExport float& max_ground_distance();

            /*!
             * @brief This function sets a value in member mode
             * @param _mode New value for member mode
             */
            eProsima_user_DllExport void mode(uint8_t _mode);

            /*!
             * @brief This function returns the value of member mode
             * @return Value of member mode
             */
            eProsima_user_DllExport uint8_t mode() const;

            /*!
             * @brief This function returns a reference to member mode
             * @return Reference to member mode
             */
            eProsima_user_DllExport uint8_t& mode();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::SensorOpticalFlow& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            uint64_t m_timestamp_sample;
            uint32_t m_device_id;
            px4_msgs::msg::float__2 m_pixel_flow;
            px4_msgs::msg::float__3 m_delta_angle;
            bool m_delta_angle_available;
            float m_distance_m;
            bool m_distance_available;
            uint32_t m_integration_timespan_us;
            uint8_t m_quality;
            uint32_t m_error_count;
            float m_max_flow_rate;
            float m_min_ground_distance;
            float m_max_ground_distance;
            uint8_t m_mode;
        };
    }
}

#endif // _PX4_MSGS_MSG_SENSOROPTICALFLOW_H_