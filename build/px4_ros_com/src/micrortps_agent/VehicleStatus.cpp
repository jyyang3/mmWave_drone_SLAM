// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "VehicleStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>





























































px4_msgs::msg::VehicleStatus::VehicleStatus()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@536f2a7e
    m_timestamp = 0;
    // m_armed_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@72bc6553
    m_armed_time = 0;
    // m_takeoff_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@66982506
    m_takeoff_time = 0;
    // m_arming_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@70cf32e3
    m_arming_state = 0;
    // m_latest_arming_reason com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5a59ca5e
    m_latest_arming_reason = 0;
    // m_latest_disarming_reason com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4bdeaabb
    m_latest_disarming_reason = 0;
    // m_nav_state_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6c4906d3
    m_nav_state_timestamp = 0;
    // m_nav_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65987993
    m_nav_state = 0;
    // m_failure_detector_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@71075444
    m_failure_detector_status = 0;
    // m_hil_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f32a3ad
    m_hil_state = 0;
    // m_vehicle_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6b695b06
    m_vehicle_type = 0;
    // m_failsafe com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4d1bf319
    m_failsafe = false;
    // m_failsafe_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f53b8a
    m_failsafe_timestamp = 0;
    // m_rc_signal_lost com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c80cf32
    m_rc_signal_lost = false;
    // m_data_link_lost com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7d900ecf
    m_data_link_lost = false;
    // m_data_link_lost_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f01b95f
    m_data_link_lost_counter = 0;
    // m_high_latency_data_link_lost com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4007f65e
    m_high_latency_data_link_lost = false;
    // m_is_vtol com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a245833
    m_is_vtol = false;
    // m_is_vtol_tailsitter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@673fdbce
    m_is_vtol_tailsitter = false;
    // m_in_transition_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5965d37
    m_in_transition_mode = false;
    // m_in_transition_to_fw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a5ceedd
    m_in_transition_to_fw = false;
    // m_mission_failure com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4201c465
    m_mission_failure = false;
    // m_geofence_violated com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5b799640
    m_geofence_violated = false;
    // m_system_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6cb107fd
    m_system_type = 0;
    // m_system_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@710636b0
    m_system_id = 0;
    // m_component_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3de8f619
    m_component_id = 0;
    // m_safety_button_available com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2ab4bc72
    m_safety_button_available = false;
    // m_safety_off com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e5ed836
    m_safety_off = false;
    // m_auto_mission_available com.eprosima.idl.parser.typecode.PrimitiveTypeCode@eadd4fb
    m_auto_mission_available = false;
    // m_power_input_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@740fb309
    m_power_input_valid = false;
    // m_usb_connected com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7bd7d6d6
    m_usb_connected = false;
    // m_open_drone_id_system_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43f02ef2
    m_open_drone_id_system_present = false;
    // m_open_drone_id_system_healthy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@239a307b
    m_open_drone_id_system_healthy = false;
    // m_parachute_system_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a8448fa
    m_parachute_system_present = false;
    // m_parachute_system_healthy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f204a1a
    m_parachute_system_healthy = false;
    // m_avoidance_system_required com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2de56eb2
    m_avoidance_system_required = false;
    // m_avoidance_system_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f8e8a9d
    m_avoidance_system_valid = false;

}

px4_msgs::msg::VehicleStatus::~VehicleStatus()
{





































}

px4_msgs::msg::VehicleStatus::VehicleStatus(const VehicleStatus &x)
{
    m_timestamp = x.m_timestamp;
    m_armed_time = x.m_armed_time;
    m_takeoff_time = x.m_takeoff_time;
    m_arming_state = x.m_arming_state;
    m_latest_arming_reason = x.m_latest_arming_reason;
    m_latest_disarming_reason = x.m_latest_disarming_reason;
    m_nav_state_timestamp = x.m_nav_state_timestamp;
    m_nav_state = x.m_nav_state;
    m_failure_detector_status = x.m_failure_detector_status;
    m_hil_state = x.m_hil_state;
    m_vehicle_type = x.m_vehicle_type;
    m_failsafe = x.m_failsafe;
    m_failsafe_timestamp = x.m_failsafe_timestamp;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_high_latency_data_link_lost = x.m_high_latency_data_link_lost;
    m_is_vtol = x.m_is_vtol;
    m_is_vtol_tailsitter = x.m_is_vtol_tailsitter;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_mission_failure = x.m_mission_failure;
    m_geofence_violated = x.m_geofence_violated;
    m_system_type = x.m_system_type;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_safety_button_available = x.m_safety_button_available;
    m_safety_off = x.m_safety_off;
    m_auto_mission_available = x.m_auto_mission_available;
    m_power_input_valid = x.m_power_input_valid;
    m_usb_connected = x.m_usb_connected;
    m_open_drone_id_system_present = x.m_open_drone_id_system_present;
    m_open_drone_id_system_healthy = x.m_open_drone_id_system_healthy;
    m_parachute_system_present = x.m_parachute_system_present;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
    m_avoidance_system_required = x.m_avoidance_system_required;
    m_avoidance_system_valid = x.m_avoidance_system_valid;
}

px4_msgs::msg::VehicleStatus::VehicleStatus(VehicleStatus &&x)
{
    m_timestamp = x.m_timestamp;
    m_armed_time = x.m_armed_time;
    m_takeoff_time = x.m_takeoff_time;
    m_arming_state = x.m_arming_state;
    m_latest_arming_reason = x.m_latest_arming_reason;
    m_latest_disarming_reason = x.m_latest_disarming_reason;
    m_nav_state_timestamp = x.m_nav_state_timestamp;
    m_nav_state = x.m_nav_state;
    m_failure_detector_status = x.m_failure_detector_status;
    m_hil_state = x.m_hil_state;
    m_vehicle_type = x.m_vehicle_type;
    m_failsafe = x.m_failsafe;
    m_failsafe_timestamp = x.m_failsafe_timestamp;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_high_latency_data_link_lost = x.m_high_latency_data_link_lost;
    m_is_vtol = x.m_is_vtol;
    m_is_vtol_tailsitter = x.m_is_vtol_tailsitter;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_mission_failure = x.m_mission_failure;
    m_geofence_violated = x.m_geofence_violated;
    m_system_type = x.m_system_type;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_safety_button_available = x.m_safety_button_available;
    m_safety_off = x.m_safety_off;
    m_auto_mission_available = x.m_auto_mission_available;
    m_power_input_valid = x.m_power_input_valid;
    m_usb_connected = x.m_usb_connected;
    m_open_drone_id_system_present = x.m_open_drone_id_system_present;
    m_open_drone_id_system_healthy = x.m_open_drone_id_system_healthy;
    m_parachute_system_present = x.m_parachute_system_present;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
    m_avoidance_system_required = x.m_avoidance_system_required;
    m_avoidance_system_valid = x.m_avoidance_system_valid;
}

px4_msgs::msg::VehicleStatus& px4_msgs::msg::VehicleStatus::operator=(const VehicleStatus &x)
{

    m_timestamp = x.m_timestamp;
    m_armed_time = x.m_armed_time;
    m_takeoff_time = x.m_takeoff_time;
    m_arming_state = x.m_arming_state;
    m_latest_arming_reason = x.m_latest_arming_reason;
    m_latest_disarming_reason = x.m_latest_disarming_reason;
    m_nav_state_timestamp = x.m_nav_state_timestamp;
    m_nav_state = x.m_nav_state;
    m_failure_detector_status = x.m_failure_detector_status;
    m_hil_state = x.m_hil_state;
    m_vehicle_type = x.m_vehicle_type;
    m_failsafe = x.m_failsafe;
    m_failsafe_timestamp = x.m_failsafe_timestamp;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_high_latency_data_link_lost = x.m_high_latency_data_link_lost;
    m_is_vtol = x.m_is_vtol;
    m_is_vtol_tailsitter = x.m_is_vtol_tailsitter;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_mission_failure = x.m_mission_failure;
    m_geofence_violated = x.m_geofence_violated;
    m_system_type = x.m_system_type;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_safety_button_available = x.m_safety_button_available;
    m_safety_off = x.m_safety_off;
    m_auto_mission_available = x.m_auto_mission_available;
    m_power_input_valid = x.m_power_input_valid;
    m_usb_connected = x.m_usb_connected;
    m_open_drone_id_system_present = x.m_open_drone_id_system_present;
    m_open_drone_id_system_healthy = x.m_open_drone_id_system_healthy;
    m_parachute_system_present = x.m_parachute_system_present;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
    m_avoidance_system_required = x.m_avoidance_system_required;
    m_avoidance_system_valid = x.m_avoidance_system_valid;

    return *this;
}

px4_msgs::msg::VehicleStatus& px4_msgs::msg::VehicleStatus::operator=(VehicleStatus &&x)
{

    m_timestamp = x.m_timestamp;
    m_armed_time = x.m_armed_time;
    m_takeoff_time = x.m_takeoff_time;
    m_arming_state = x.m_arming_state;
    m_latest_arming_reason = x.m_latest_arming_reason;
    m_latest_disarming_reason = x.m_latest_disarming_reason;
    m_nav_state_timestamp = x.m_nav_state_timestamp;
    m_nav_state = x.m_nav_state;
    m_failure_detector_status = x.m_failure_detector_status;
    m_hil_state = x.m_hil_state;
    m_vehicle_type = x.m_vehicle_type;
    m_failsafe = x.m_failsafe;
    m_failsafe_timestamp = x.m_failsafe_timestamp;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_high_latency_data_link_lost = x.m_high_latency_data_link_lost;
    m_is_vtol = x.m_is_vtol;
    m_is_vtol_tailsitter = x.m_is_vtol_tailsitter;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_mission_failure = x.m_mission_failure;
    m_geofence_violated = x.m_geofence_violated;
    m_system_type = x.m_system_type;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_safety_button_available = x.m_safety_button_available;
    m_safety_off = x.m_safety_off;
    m_auto_mission_available = x.m_auto_mission_available;
    m_power_input_valid = x.m_power_input_valid;
    m_usb_connected = x.m_usb_connected;
    m_open_drone_id_system_present = x.m_open_drone_id_system_present;
    m_open_drone_id_system_healthy = x.m_open_drone_id_system_healthy;
    m_parachute_system_present = x.m_parachute_system_present;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
    m_avoidance_system_required = x.m_avoidance_system_required;
    m_avoidance_system_valid = x.m_avoidance_system_valid;

    return *this;
}

size_t px4_msgs::msg::VehicleStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::VehicleStatus::getCdrSerializedSize(const px4_msgs::msg::VehicleStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::VehicleStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_armed_time;
    scdr << m_takeoff_time;
    scdr << m_arming_state;
    scdr << m_latest_arming_reason;
    scdr << m_latest_disarming_reason;
    scdr << m_nav_state_timestamp;
    scdr << m_nav_state;
    scdr << m_failure_detector_status;
    scdr << m_hil_state;
    scdr << m_vehicle_type;
    scdr << m_failsafe;
    scdr << m_failsafe_timestamp;
    scdr << m_rc_signal_lost;
    scdr << m_data_link_lost;
    scdr << m_data_link_lost_counter;
    scdr << m_high_latency_data_link_lost;
    scdr << m_is_vtol;
    scdr << m_is_vtol_tailsitter;
    scdr << m_in_transition_mode;
    scdr << m_in_transition_to_fw;
    scdr << m_mission_failure;
    scdr << m_geofence_violated;
    scdr << m_system_type;
    scdr << m_system_id;
    scdr << m_component_id;
    scdr << m_safety_button_available;
    scdr << m_safety_off;
    scdr << m_auto_mission_available;
    scdr << m_power_input_valid;
    scdr << m_usb_connected;
    scdr << m_open_drone_id_system_present;
    scdr << m_open_drone_id_system_healthy;
    scdr << m_parachute_system_present;
    scdr << m_parachute_system_healthy;
    scdr << m_avoidance_system_required;
    scdr << m_avoidance_system_valid;
}

void px4_msgs::msg::VehicleStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_armed_time;
    dcdr >> m_takeoff_time;
    dcdr >> m_arming_state;
    dcdr >> m_latest_arming_reason;
    dcdr >> m_latest_disarming_reason;
    dcdr >> m_nav_state_timestamp;
    dcdr >> m_nav_state;
    dcdr >> m_failure_detector_status;
    dcdr >> m_hil_state;
    dcdr >> m_vehicle_type;
    dcdr >> m_failsafe;
    dcdr >> m_failsafe_timestamp;
    dcdr >> m_rc_signal_lost;
    dcdr >> m_data_link_lost;
    dcdr >> m_data_link_lost_counter;
    dcdr >> m_high_latency_data_link_lost;
    dcdr >> m_is_vtol;
    dcdr >> m_is_vtol_tailsitter;
    dcdr >> m_in_transition_mode;
    dcdr >> m_in_transition_to_fw;
    dcdr >> m_mission_failure;
    dcdr >> m_geofence_violated;
    dcdr >> m_system_type;
    dcdr >> m_system_id;
    dcdr >> m_component_id;
    dcdr >> m_safety_button_available;
    dcdr >> m_safety_off;
    dcdr >> m_auto_mission_available;
    dcdr >> m_power_input_valid;
    dcdr >> m_usb_connected;
    dcdr >> m_open_drone_id_system_present;
    dcdr >> m_open_drone_id_system_healthy;
    dcdr >> m_parachute_system_present;
    dcdr >> m_parachute_system_healthy;
    dcdr >> m_avoidance_system_required;
    dcdr >> m_avoidance_system_valid;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::VehicleStatus::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::VehicleStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::VehicleStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member armed_time
 * @param _armed_time New value for member armed_time
 */
void px4_msgs::msg::VehicleStatus::armed_time(uint64_t _armed_time)
{
m_armed_time = _armed_time;
}

/*!
 * @brief This function returns the value of member armed_time
 * @return Value of member armed_time
 */
uint64_t px4_msgs::msg::VehicleStatus::armed_time() const
{
    return m_armed_time;
}

/*!
 * @brief This function returns a reference to member armed_time
 * @return Reference to member armed_time
 */
uint64_t& px4_msgs::msg::VehicleStatus::armed_time()
{
    return m_armed_time;
}

/*!
 * @brief This function sets a value in member takeoff_time
 * @param _takeoff_time New value for member takeoff_time
 */
void px4_msgs::msg::VehicleStatus::takeoff_time(uint64_t _takeoff_time)
{
m_takeoff_time = _takeoff_time;
}

/*!
 * @brief This function returns the value of member takeoff_time
 * @return Value of member takeoff_time
 */
uint64_t px4_msgs::msg::VehicleStatus::takeoff_time() const
{
    return m_takeoff_time;
}

/*!
 * @brief This function returns a reference to member takeoff_time
 * @return Reference to member takeoff_time
 */
uint64_t& px4_msgs::msg::VehicleStatus::takeoff_time()
{
    return m_takeoff_time;
}

/*!
 * @brief This function sets a value in member arming_state
 * @param _arming_state New value for member arming_state
 */
void px4_msgs::msg::VehicleStatus::arming_state(uint8_t _arming_state)
{
m_arming_state = _arming_state;
}

/*!
 * @brief This function returns the value of member arming_state
 * @return Value of member arming_state
 */
uint8_t px4_msgs::msg::VehicleStatus::arming_state() const
{
    return m_arming_state;
}

/*!
 * @brief This function returns a reference to member arming_state
 * @return Reference to member arming_state
 */
uint8_t& px4_msgs::msg::VehicleStatus::arming_state()
{
    return m_arming_state;
}

/*!
 * @brief This function sets a value in member latest_arming_reason
 * @param _latest_arming_reason New value for member latest_arming_reason
 */
void px4_msgs::msg::VehicleStatus::latest_arming_reason(uint8_t _latest_arming_reason)
{
m_latest_arming_reason = _latest_arming_reason;
}

/*!
 * @brief This function returns the value of member latest_arming_reason
 * @return Value of member latest_arming_reason
 */
uint8_t px4_msgs::msg::VehicleStatus::latest_arming_reason() const
{
    return m_latest_arming_reason;
}

/*!
 * @brief This function returns a reference to member latest_arming_reason
 * @return Reference to member latest_arming_reason
 */
uint8_t& px4_msgs::msg::VehicleStatus::latest_arming_reason()
{
    return m_latest_arming_reason;
}

/*!
 * @brief This function sets a value in member latest_disarming_reason
 * @param _latest_disarming_reason New value for member latest_disarming_reason
 */
void px4_msgs::msg::VehicleStatus::latest_disarming_reason(uint8_t _latest_disarming_reason)
{
m_latest_disarming_reason = _latest_disarming_reason;
}

/*!
 * @brief This function returns the value of member latest_disarming_reason
 * @return Value of member latest_disarming_reason
 */
uint8_t px4_msgs::msg::VehicleStatus::latest_disarming_reason() const
{
    return m_latest_disarming_reason;
}

/*!
 * @brief This function returns a reference to member latest_disarming_reason
 * @return Reference to member latest_disarming_reason
 */
uint8_t& px4_msgs::msg::VehicleStatus::latest_disarming_reason()
{
    return m_latest_disarming_reason;
}

/*!
 * @brief This function sets a value in member nav_state_timestamp
 * @param _nav_state_timestamp New value for member nav_state_timestamp
 */
void px4_msgs::msg::VehicleStatus::nav_state_timestamp(uint64_t _nav_state_timestamp)
{
m_nav_state_timestamp = _nav_state_timestamp;
}

/*!
 * @brief This function returns the value of member nav_state_timestamp
 * @return Value of member nav_state_timestamp
 */
uint64_t px4_msgs::msg::VehicleStatus::nav_state_timestamp() const
{
    return m_nav_state_timestamp;
}

/*!
 * @brief This function returns a reference to member nav_state_timestamp
 * @return Reference to member nav_state_timestamp
 */
uint64_t& px4_msgs::msg::VehicleStatus::nav_state_timestamp()
{
    return m_nav_state_timestamp;
}

/*!
 * @brief This function sets a value in member nav_state
 * @param _nav_state New value for member nav_state
 */
void px4_msgs::msg::VehicleStatus::nav_state(uint8_t _nav_state)
{
m_nav_state = _nav_state;
}

/*!
 * @brief This function returns the value of member nav_state
 * @return Value of member nav_state
 */
uint8_t px4_msgs::msg::VehicleStatus::nav_state() const
{
    return m_nav_state;
}

/*!
 * @brief This function returns a reference to member nav_state
 * @return Reference to member nav_state
 */
uint8_t& px4_msgs::msg::VehicleStatus::nav_state()
{
    return m_nav_state;
}

/*!
 * @brief This function sets a value in member failure_detector_status
 * @param _failure_detector_status New value for member failure_detector_status
 */
void px4_msgs::msg::VehicleStatus::failure_detector_status(uint16_t _failure_detector_status)
{
m_failure_detector_status = _failure_detector_status;
}

/*!
 * @brief This function returns the value of member failure_detector_status
 * @return Value of member failure_detector_status
 */
uint16_t px4_msgs::msg::VehicleStatus::failure_detector_status() const
{
    return m_failure_detector_status;
}

/*!
 * @brief This function returns a reference to member failure_detector_status
 * @return Reference to member failure_detector_status
 */
uint16_t& px4_msgs::msg::VehicleStatus::failure_detector_status()
{
    return m_failure_detector_status;
}

/*!
 * @brief This function sets a value in member hil_state
 * @param _hil_state New value for member hil_state
 */
void px4_msgs::msg::VehicleStatus::hil_state(uint8_t _hil_state)
{
m_hil_state = _hil_state;
}

/*!
 * @brief This function returns the value of member hil_state
 * @return Value of member hil_state
 */
uint8_t px4_msgs::msg::VehicleStatus::hil_state() const
{
    return m_hil_state;
}

/*!
 * @brief This function returns a reference to member hil_state
 * @return Reference to member hil_state
 */
uint8_t& px4_msgs::msg::VehicleStatus::hil_state()
{
    return m_hil_state;
}

/*!
 * @brief This function sets a value in member vehicle_type
 * @param _vehicle_type New value for member vehicle_type
 */
void px4_msgs::msg::VehicleStatus::vehicle_type(uint8_t _vehicle_type)
{
m_vehicle_type = _vehicle_type;
}

/*!
 * @brief This function returns the value of member vehicle_type
 * @return Value of member vehicle_type
 */
uint8_t px4_msgs::msg::VehicleStatus::vehicle_type() const
{
    return m_vehicle_type;
}

/*!
 * @brief This function returns a reference to member vehicle_type
 * @return Reference to member vehicle_type
 */
uint8_t& px4_msgs::msg::VehicleStatus::vehicle_type()
{
    return m_vehicle_type;
}

/*!
 * @brief This function sets a value in member failsafe
 * @param _failsafe New value for member failsafe
 */
void px4_msgs::msg::VehicleStatus::failsafe(bool _failsafe)
{
m_failsafe = _failsafe;
}

/*!
 * @brief This function returns the value of member failsafe
 * @return Value of member failsafe
 */
bool px4_msgs::msg::VehicleStatus::failsafe() const
{
    return m_failsafe;
}

/*!
 * @brief This function returns a reference to member failsafe
 * @return Reference to member failsafe
 */
bool& px4_msgs::msg::VehicleStatus::failsafe()
{
    return m_failsafe;
}

/*!
 * @brief This function sets a value in member failsafe_timestamp
 * @param _failsafe_timestamp New value for member failsafe_timestamp
 */
void px4_msgs::msg::VehicleStatus::failsafe_timestamp(uint64_t _failsafe_timestamp)
{
m_failsafe_timestamp = _failsafe_timestamp;
}

/*!
 * @brief This function returns the value of member failsafe_timestamp
 * @return Value of member failsafe_timestamp
 */
uint64_t px4_msgs::msg::VehicleStatus::failsafe_timestamp() const
{
    return m_failsafe_timestamp;
}

/*!
 * @brief This function returns a reference to member failsafe_timestamp
 * @return Reference to member failsafe_timestamp
 */
uint64_t& px4_msgs::msg::VehicleStatus::failsafe_timestamp()
{
    return m_failsafe_timestamp;
}

/*!
 * @brief This function sets a value in member rc_signal_lost
 * @param _rc_signal_lost New value for member rc_signal_lost
 */
void px4_msgs::msg::VehicleStatus::rc_signal_lost(bool _rc_signal_lost)
{
m_rc_signal_lost = _rc_signal_lost;
}

/*!
 * @brief This function returns the value of member rc_signal_lost
 * @return Value of member rc_signal_lost
 */
bool px4_msgs::msg::VehicleStatus::rc_signal_lost() const
{
    return m_rc_signal_lost;
}

/*!
 * @brief This function returns a reference to member rc_signal_lost
 * @return Reference to member rc_signal_lost
 */
bool& px4_msgs::msg::VehicleStatus::rc_signal_lost()
{
    return m_rc_signal_lost;
}

/*!
 * @brief This function sets a value in member data_link_lost
 * @param _data_link_lost New value for member data_link_lost
 */
void px4_msgs::msg::VehicleStatus::data_link_lost(bool _data_link_lost)
{
m_data_link_lost = _data_link_lost;
}

/*!
 * @brief This function returns the value of member data_link_lost
 * @return Value of member data_link_lost
 */
bool px4_msgs::msg::VehicleStatus::data_link_lost() const
{
    return m_data_link_lost;
}

/*!
 * @brief This function returns a reference to member data_link_lost
 * @return Reference to member data_link_lost
 */
bool& px4_msgs::msg::VehicleStatus::data_link_lost()
{
    return m_data_link_lost;
}

/*!
 * @brief This function sets a value in member data_link_lost_counter
 * @param _data_link_lost_counter New value for member data_link_lost_counter
 */
void px4_msgs::msg::VehicleStatus::data_link_lost_counter(uint8_t _data_link_lost_counter)
{
m_data_link_lost_counter = _data_link_lost_counter;
}

/*!
 * @brief This function returns the value of member data_link_lost_counter
 * @return Value of member data_link_lost_counter
 */
uint8_t px4_msgs::msg::VehicleStatus::data_link_lost_counter() const
{
    return m_data_link_lost_counter;
}

/*!
 * @brief This function returns a reference to member data_link_lost_counter
 * @return Reference to member data_link_lost_counter
 */
uint8_t& px4_msgs::msg::VehicleStatus::data_link_lost_counter()
{
    return m_data_link_lost_counter;
}

/*!
 * @brief This function sets a value in member high_latency_data_link_lost
 * @param _high_latency_data_link_lost New value for member high_latency_data_link_lost
 */
void px4_msgs::msg::VehicleStatus::high_latency_data_link_lost(bool _high_latency_data_link_lost)
{
m_high_latency_data_link_lost = _high_latency_data_link_lost;
}

/*!
 * @brief This function returns the value of member high_latency_data_link_lost
 * @return Value of member high_latency_data_link_lost
 */
bool px4_msgs::msg::VehicleStatus::high_latency_data_link_lost() const
{
    return m_high_latency_data_link_lost;
}

/*!
 * @brief This function returns a reference to member high_latency_data_link_lost
 * @return Reference to member high_latency_data_link_lost
 */
bool& px4_msgs::msg::VehicleStatus::high_latency_data_link_lost()
{
    return m_high_latency_data_link_lost;
}

/*!
 * @brief This function sets a value in member is_vtol
 * @param _is_vtol New value for member is_vtol
 */
void px4_msgs::msg::VehicleStatus::is_vtol(bool _is_vtol)
{
m_is_vtol = _is_vtol;
}

/*!
 * @brief This function returns the value of member is_vtol
 * @return Value of member is_vtol
 */
bool px4_msgs::msg::VehicleStatus::is_vtol() const
{
    return m_is_vtol;
}

/*!
 * @brief This function returns a reference to member is_vtol
 * @return Reference to member is_vtol
 */
bool& px4_msgs::msg::VehicleStatus::is_vtol()
{
    return m_is_vtol;
}

/*!
 * @brief This function sets a value in member is_vtol_tailsitter
 * @param _is_vtol_tailsitter New value for member is_vtol_tailsitter
 */
void px4_msgs::msg::VehicleStatus::is_vtol_tailsitter(bool _is_vtol_tailsitter)
{
m_is_vtol_tailsitter = _is_vtol_tailsitter;
}

/*!
 * @brief This function returns the value of member is_vtol_tailsitter
 * @return Value of member is_vtol_tailsitter
 */
bool px4_msgs::msg::VehicleStatus::is_vtol_tailsitter() const
{
    return m_is_vtol_tailsitter;
}

/*!
 * @brief This function returns a reference to member is_vtol_tailsitter
 * @return Reference to member is_vtol_tailsitter
 */
bool& px4_msgs::msg::VehicleStatus::is_vtol_tailsitter()
{
    return m_is_vtol_tailsitter;
}

/*!
 * @brief This function sets a value in member in_transition_mode
 * @param _in_transition_mode New value for member in_transition_mode
 */
void px4_msgs::msg::VehicleStatus::in_transition_mode(bool _in_transition_mode)
{
m_in_transition_mode = _in_transition_mode;
}

/*!
 * @brief This function returns the value of member in_transition_mode
 * @return Value of member in_transition_mode
 */
bool px4_msgs::msg::VehicleStatus::in_transition_mode() const
{
    return m_in_transition_mode;
}

/*!
 * @brief This function returns a reference to member in_transition_mode
 * @return Reference to member in_transition_mode
 */
bool& px4_msgs::msg::VehicleStatus::in_transition_mode()
{
    return m_in_transition_mode;
}

/*!
 * @brief This function sets a value in member in_transition_to_fw
 * @param _in_transition_to_fw New value for member in_transition_to_fw
 */
void px4_msgs::msg::VehicleStatus::in_transition_to_fw(bool _in_transition_to_fw)
{
m_in_transition_to_fw = _in_transition_to_fw;
}

/*!
 * @brief This function returns the value of member in_transition_to_fw
 * @return Value of member in_transition_to_fw
 */
bool px4_msgs::msg::VehicleStatus::in_transition_to_fw() const
{
    return m_in_transition_to_fw;
}

/*!
 * @brief This function returns a reference to member in_transition_to_fw
 * @return Reference to member in_transition_to_fw
 */
bool& px4_msgs::msg::VehicleStatus::in_transition_to_fw()
{
    return m_in_transition_to_fw;
}

/*!
 * @brief This function sets a value in member mission_failure
 * @param _mission_failure New value for member mission_failure
 */
void px4_msgs::msg::VehicleStatus::mission_failure(bool _mission_failure)
{
m_mission_failure = _mission_failure;
}

/*!
 * @brief This function returns the value of member mission_failure
 * @return Value of member mission_failure
 */
bool px4_msgs::msg::VehicleStatus::mission_failure() const
{
    return m_mission_failure;
}

/*!
 * @brief This function returns a reference to member mission_failure
 * @return Reference to member mission_failure
 */
bool& px4_msgs::msg::VehicleStatus::mission_failure()
{
    return m_mission_failure;
}

/*!
 * @brief This function sets a value in member geofence_violated
 * @param _geofence_violated New value for member geofence_violated
 */
void px4_msgs::msg::VehicleStatus::geofence_violated(bool _geofence_violated)
{
m_geofence_violated = _geofence_violated;
}

/*!
 * @brief This function returns the value of member geofence_violated
 * @return Value of member geofence_violated
 */
bool px4_msgs::msg::VehicleStatus::geofence_violated() const
{
    return m_geofence_violated;
}

/*!
 * @brief This function returns a reference to member geofence_violated
 * @return Reference to member geofence_violated
 */
bool& px4_msgs::msg::VehicleStatus::geofence_violated()
{
    return m_geofence_violated;
}

/*!
 * @brief This function sets a value in member system_type
 * @param _system_type New value for member system_type
 */
void px4_msgs::msg::VehicleStatus::system_type(uint8_t _system_type)
{
m_system_type = _system_type;
}

/*!
 * @brief This function returns the value of member system_type
 * @return Value of member system_type
 */
uint8_t px4_msgs::msg::VehicleStatus::system_type() const
{
    return m_system_type;
}

/*!
 * @brief This function returns a reference to member system_type
 * @return Reference to member system_type
 */
uint8_t& px4_msgs::msg::VehicleStatus::system_type()
{
    return m_system_type;
}

/*!
 * @brief This function sets a value in member system_id
 * @param _system_id New value for member system_id
 */
void px4_msgs::msg::VehicleStatus::system_id(uint8_t _system_id)
{
m_system_id = _system_id;
}

/*!
 * @brief This function returns the value of member system_id
 * @return Value of member system_id
 */
uint8_t px4_msgs::msg::VehicleStatus::system_id() const
{
    return m_system_id;
}

/*!
 * @brief This function returns a reference to member system_id
 * @return Reference to member system_id
 */
uint8_t& px4_msgs::msg::VehicleStatus::system_id()
{
    return m_system_id;
}

/*!
 * @brief This function sets a value in member component_id
 * @param _component_id New value for member component_id
 */
void px4_msgs::msg::VehicleStatus::component_id(uint8_t _component_id)
{
m_component_id = _component_id;
}

/*!
 * @brief This function returns the value of member component_id
 * @return Value of member component_id
 */
uint8_t px4_msgs::msg::VehicleStatus::component_id() const
{
    return m_component_id;
}

/*!
 * @brief This function returns a reference to member component_id
 * @return Reference to member component_id
 */
uint8_t& px4_msgs::msg::VehicleStatus::component_id()
{
    return m_component_id;
}

/*!
 * @brief This function sets a value in member safety_button_available
 * @param _safety_button_available New value for member safety_button_available
 */
void px4_msgs::msg::VehicleStatus::safety_button_available(bool _safety_button_available)
{
m_safety_button_available = _safety_button_available;
}

/*!
 * @brief This function returns the value of member safety_button_available
 * @return Value of member safety_button_available
 */
bool px4_msgs::msg::VehicleStatus::safety_button_available() const
{
    return m_safety_button_available;
}

/*!
 * @brief This function returns a reference to member safety_button_available
 * @return Reference to member safety_button_available
 */
bool& px4_msgs::msg::VehicleStatus::safety_button_available()
{
    return m_safety_button_available;
}

/*!
 * @brief This function sets a value in member safety_off
 * @param _safety_off New value for member safety_off
 */
void px4_msgs::msg::VehicleStatus::safety_off(bool _safety_off)
{
m_safety_off = _safety_off;
}

/*!
 * @brief This function returns the value of member safety_off
 * @return Value of member safety_off
 */
bool px4_msgs::msg::VehicleStatus::safety_off() const
{
    return m_safety_off;
}

/*!
 * @brief This function returns a reference to member safety_off
 * @return Reference to member safety_off
 */
bool& px4_msgs::msg::VehicleStatus::safety_off()
{
    return m_safety_off;
}

/*!
 * @brief This function sets a value in member auto_mission_available
 * @param _auto_mission_available New value for member auto_mission_available
 */
void px4_msgs::msg::VehicleStatus::auto_mission_available(bool _auto_mission_available)
{
m_auto_mission_available = _auto_mission_available;
}

/*!
 * @brief This function returns the value of member auto_mission_available
 * @return Value of member auto_mission_available
 */
bool px4_msgs::msg::VehicleStatus::auto_mission_available() const
{
    return m_auto_mission_available;
}

/*!
 * @brief This function returns a reference to member auto_mission_available
 * @return Reference to member auto_mission_available
 */
bool& px4_msgs::msg::VehicleStatus::auto_mission_available()
{
    return m_auto_mission_available;
}

/*!
 * @brief This function sets a value in member power_input_valid
 * @param _power_input_valid New value for member power_input_valid
 */
void px4_msgs::msg::VehicleStatus::power_input_valid(bool _power_input_valid)
{
m_power_input_valid = _power_input_valid;
}

/*!
 * @brief This function returns the value of member power_input_valid
 * @return Value of member power_input_valid
 */
bool px4_msgs::msg::VehicleStatus::power_input_valid() const
{
    return m_power_input_valid;
}

/*!
 * @brief This function returns a reference to member power_input_valid
 * @return Reference to member power_input_valid
 */
bool& px4_msgs::msg::VehicleStatus::power_input_valid()
{
    return m_power_input_valid;
}

/*!
 * @brief This function sets a value in member usb_connected
 * @param _usb_connected New value for member usb_connected
 */
void px4_msgs::msg::VehicleStatus::usb_connected(bool _usb_connected)
{
m_usb_connected = _usb_connected;
}

/*!
 * @brief This function returns the value of member usb_connected
 * @return Value of member usb_connected
 */
bool px4_msgs::msg::VehicleStatus::usb_connected() const
{
    return m_usb_connected;
}

/*!
 * @brief This function returns a reference to member usb_connected
 * @return Reference to member usb_connected
 */
bool& px4_msgs::msg::VehicleStatus::usb_connected()
{
    return m_usb_connected;
}

/*!
 * @brief This function sets a value in member open_drone_id_system_present
 * @param _open_drone_id_system_present New value for member open_drone_id_system_present
 */
void px4_msgs::msg::VehicleStatus::open_drone_id_system_present(bool _open_drone_id_system_present)
{
m_open_drone_id_system_present = _open_drone_id_system_present;
}

/*!
 * @brief This function returns the value of member open_drone_id_system_present
 * @return Value of member open_drone_id_system_present
 */
bool px4_msgs::msg::VehicleStatus::open_drone_id_system_present() const
{
    return m_open_drone_id_system_present;
}

/*!
 * @brief This function returns a reference to member open_drone_id_system_present
 * @return Reference to member open_drone_id_system_present
 */
bool& px4_msgs::msg::VehicleStatus::open_drone_id_system_present()
{
    return m_open_drone_id_system_present;
}

/*!
 * @brief This function sets a value in member open_drone_id_system_healthy
 * @param _open_drone_id_system_healthy New value for member open_drone_id_system_healthy
 */
void px4_msgs::msg::VehicleStatus::open_drone_id_system_healthy(bool _open_drone_id_system_healthy)
{
m_open_drone_id_system_healthy = _open_drone_id_system_healthy;
}

/*!
 * @brief This function returns the value of member open_drone_id_system_healthy
 * @return Value of member open_drone_id_system_healthy
 */
bool px4_msgs::msg::VehicleStatus::open_drone_id_system_healthy() const
{
    return m_open_drone_id_system_healthy;
}

/*!
 * @brief This function returns a reference to member open_drone_id_system_healthy
 * @return Reference to member open_drone_id_system_healthy
 */
bool& px4_msgs::msg::VehicleStatus::open_drone_id_system_healthy()
{
    return m_open_drone_id_system_healthy;
}

/*!
 * @brief This function sets a value in member parachute_system_present
 * @param _parachute_system_present New value for member parachute_system_present
 */
void px4_msgs::msg::VehicleStatus::parachute_system_present(bool _parachute_system_present)
{
m_parachute_system_present = _parachute_system_present;
}

/*!
 * @brief This function returns the value of member parachute_system_present
 * @return Value of member parachute_system_present
 */
bool px4_msgs::msg::VehicleStatus::parachute_system_present() const
{
    return m_parachute_system_present;
}

/*!
 * @brief This function returns a reference to member parachute_system_present
 * @return Reference to member parachute_system_present
 */
bool& px4_msgs::msg::VehicleStatus::parachute_system_present()
{
    return m_parachute_system_present;
}

/*!
 * @brief This function sets a value in member parachute_system_healthy
 * @param _parachute_system_healthy New value for member parachute_system_healthy
 */
void px4_msgs::msg::VehicleStatus::parachute_system_healthy(bool _parachute_system_healthy)
{
m_parachute_system_healthy = _parachute_system_healthy;
}

/*!
 * @brief This function returns the value of member parachute_system_healthy
 * @return Value of member parachute_system_healthy
 */
bool px4_msgs::msg::VehicleStatus::parachute_system_healthy() const
{
    return m_parachute_system_healthy;
}

/*!
 * @brief This function returns a reference to member parachute_system_healthy
 * @return Reference to member parachute_system_healthy
 */
bool& px4_msgs::msg::VehicleStatus::parachute_system_healthy()
{
    return m_parachute_system_healthy;
}

/*!
 * @brief This function sets a value in member avoidance_system_required
 * @param _avoidance_system_required New value for member avoidance_system_required
 */
void px4_msgs::msg::VehicleStatus::avoidance_system_required(bool _avoidance_system_required)
{
m_avoidance_system_required = _avoidance_system_required;
}

/*!
 * @brief This function returns the value of member avoidance_system_required
 * @return Value of member avoidance_system_required
 */
bool px4_msgs::msg::VehicleStatus::avoidance_system_required() const
{
    return m_avoidance_system_required;
}

/*!
 * @brief This function returns a reference to member avoidance_system_required
 * @return Reference to member avoidance_system_required
 */
bool& px4_msgs::msg::VehicleStatus::avoidance_system_required()
{
    return m_avoidance_system_required;
}

/*!
 * @brief This function sets a value in member avoidance_system_valid
 * @param _avoidance_system_valid New value for member avoidance_system_valid
 */
void px4_msgs::msg::VehicleStatus::avoidance_system_valid(bool _avoidance_system_valid)
{
m_avoidance_system_valid = _avoidance_system_valid;
}

/*!
 * @brief This function returns the value of member avoidance_system_valid
 * @return Value of member avoidance_system_valid
 */
bool px4_msgs::msg::VehicleStatus::avoidance_system_valid() const
{
    return m_avoidance_system_valid;
}

/*!
 * @brief This function returns a reference to member avoidance_system_valid
 * @return Reference to member avoidance_system_valid
 */
bool& px4_msgs::msg::VehicleStatus::avoidance_system_valid()
{
    return m_avoidance_system_valid;
}


size_t px4_msgs::msg::VehicleStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;








































    return current_align;
}

bool px4_msgs::msg::VehicleStatus::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::VehicleStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}


